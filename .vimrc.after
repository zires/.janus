"set guifont=Monaco:h14
"color railscasts2
let g:seoul256_background = 235
colo seoul256

set guifont=Menlo:h14
"color  Tomorrow-Night-Eighties


"--------------------------------------------------------
"" plugin MatchTagAlways
" "--------------------------------------------------------
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'eruby' : 1,
    \}



"--------------------------------------------------------
"" plugin Tabular.vim mappings
" "--------------------------------------------------------
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
  nmap <Leader>a> :Tabularize /=><CR>
  vmap <Leader>a> :Tabularize /=><CR>
  nmap <Leader>a# :Tabularize /#<CR>
  vmap <Leader>a# :Tabularize /#<CR>
endif



"--------------------------------------------------------
"" plugin vim-ruby-runner
" "--------------------------------------------------------
command! FR set filetype=ruby


"--------------------------------------------------------
"" plugin vim-scratch
" "--------------------------------------------------------
"autocmd User PluginScratchInitializeBefore set filetype=ruby



"--------------------------------------------------------
"" plugin vim-dash
" "--------------------------------------------------------
:nmap <silent> <leader>d <Plug>DashSearch
let g:dash_map = {
        \ 'ruby' : 'rails'
        \ }



"--------------------------------------------------------
"" plugin yankring
" "--------------------------------------------------------
":nmap <silent> <leader>y :YRShow<CR>



"--------------------------------------------------------
"" plugin CtrlP
" "--------------------------------------------------------
:nmap <silent> <leader>B :CtrlPBuffer<CR>
:nmap <silent> <leader>m :CtrlPMixed<CR>



"--------------------------------------------------------
"" plugin airline
" "--------------------------------------------------------
let g:airline#extensions#tabline#enabled = 1



"--------------------------------------------------------
"" syntastic ng
" "--------------------------------------------------------
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]


"--------------------------------------------------------
"" disable nerdTreeCmd
" "--------------------------------------------------------
augroup AuNERDTreeCmd
  autocmd! FocusGained
augroup end
map <leader>r :NERDTreeFind<cr>



"--------------------------------------------------------
"" plugin ChooseWin
" "--------------------------------------------------------
:nmap <silent> <leader>cw :ChooseWin<CR>



"--------------------------------------------------------
"" plugin  ctrlsf
" "--------------------------------------------------------
if has("gui_macvim") && has("gui_running")
  " Command-Shift-F on OSX
  call janus#add_mapping('ack', 'map', '<D-F>', ':CtrlSF<space>')
else
  " Define <C-F> to a dummy value to see if it would set <C-f> as well.
  map <C-F> :dummy

  if maparg("<C-f>") == ":dummy"
    " <leader>f on systems where <C-f> == <C-F>
    call janus#add_mapping('ack', 'map', '<leader>f', ':CtrlSF<space>')
  else
    " <C-F> if we can still map <C-f> to <S-Down>
    call janus#add_mapping('ack', 'map', '<C-F>', ':CtrlSF<space>')
  endif

  map <C-f> <S-Down>
endif
let g:ctrlsf_auto_close = 0



"--------------------------------------------------------
"" plugin  neocomplete
" "--------------------------------------------------------
"let g:neocomplete#enable_at_startup = 1



"--------------------------------------------------------
"" plugin  ultisnips
" "--------------------------------------------------------
"let g:UltiSnipsEditSplit="vertical"



"--------------------------------------------------------
"" plugin  vim-autoclose
" "--------------------------------------------------------
"let g:autoclose_vim_commentmode = 1

autocmd FileType html,eruby let b:closetag_html_style=1
autocmd FileType html,eruby source ~/.janus/closetag.vim/plugin/closetag.vim



"--------------------------------------------------------
"" plugin  vim-easy-align
" "--------------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
"
" " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)"




"--------------------------------------------------------
"" plugin  syntastic
" "--------------------------------------------------------
"mark syntax errors with :signs
let g:syntastic_enable_signs=1

""automatically jump to the error when saving the file
let g:syntastic_auto_jump=0

"show the error list automatically
let g:syntastic_auto_loc_list=1

""don't care about warnings
let g:syntastic_quiet_messages = {'level': 'warnings'}

"allow for ionic html attributes
let g:syntastic_html_tidy_blocklevel_tags = [
  \'ion-checkbox',
  \'ion-content',
  \'ion-delete-button',
  \'ion-footer-bar',
  \'ion-header-bar',
  \'ion-infinite-scroll',
  \'ion-item',
  \'ion-list',
  \'ion-modal-view',
  \'ion-nav-back-button',
  \'ion-nav-bar',
  \'ion-nav-buttons',
  \'ion-nav-view',
  \'ion-option-button',
  \'ion-pane',
  \'ion-popover-view',
  \'ion-radio',
  \'ion-refresher',
  \'ion-reorder-button',
  \'ion-scroll',
  \'ion-side-menu',
  \'ion-side-menus',
  \'ion-side-menu-content',
  \'ion-slide',
  \'ion-slide-box',
  \'ion-tab',
  \'ion-tabs',
  \'ion-toggle',
  \'ion-view',
  \]
